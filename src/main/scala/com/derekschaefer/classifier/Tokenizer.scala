package com.derekschaefer.classifier

class Tokenizer(val _lang: String) {

  def this() = this(null)

  def eachWord(text: String): List[String] = {
    var tokens = List[String]()

    if (text == "") return tokens

    if (_lang != null) {
      val stemmer_class = "org.tartarus.snowball.ext." + _lang.toLowerCase + "Stemmer"
      val stemmer = Class.forName(stemmer_class).newInstance.asInstanceOf[{
        def stem()
        def getCurrent(): String
        def setCurrent(name: String)
      }]
      words(text).foreach(w => {
        if (!Tokenizer.stop_words.contains(w)) {
          stemmer.setCurrent(w)
          stemmer.stem()
          tokens = tokens ::: List(stemmer.getCurrent)
        }
      })
    } else {
      words(text).foreach(w => {
        if (!Tokenizer.stop_words.contains(w)) {
          tokens = tokens ::: List(w)
        }
      })
    }

    tokens
  }

  private def words(text: String): Array[String] = {
    text.toLowerCase.replaceAll("""['`]""", "").replaceAll("""[^a-zA-Z]+""", " ").split("""\s+""")
  }

}

object Tokenizer {

  val stop_words = Array[String](
    "a",
    "about",
    "above",
    "after",
    "again",
    "against",
    "all",
    "am",
    "an",
    "and",
    "any",
    "are",
    "arent",
    "aren't",
    "as",
    "at",
    "be",
    "because",
    "been",
    "before",
    "being",
    "below",
    "between",
    "both",
    "but",
    "by",
    "cant",
    "can't",
    "cannot",
    "could",
    "couldnt",
    "couldn't",
    "did",
    "didnt",
    "didn't",
    "do",
    "does",
    "doesnt",
    "doesn't",
    "doing",
    "dont",
    "don't",
    "down",
    "during",
    "each",
    "few",
    "for",
    "from",
    "further",
    "had",
    "hadnt",
    "hadn't",
    "has",
    "hasnt",
    "hasn't",
    "have",
    "havent",
    "haven't",
    "having",
    "he",
    "hed",
    "he'd",
    "he'll",
    "hes",
    "he's",
    "her",
    "here",
    "heres",
    "here's",
    "hers",
    "herself",
    "him",
    "himself",
    "his",
    "how",
    "hows",
    "how's",
    "i",
    "i'd",
    "i'll",
    "im",
    "i'm",
    "ive",
    "i've",
    "if",
    "in",
    "into",
    "is",
    "isnt",
    "isn't",
    "it",
    "it's",
    "its",
    "itself",
    "lets",
    "let's",
    "me",
    "more",
    "most",
    "mustnt",
    "mustn't",
    "my",
    "myself",
    "no",
    "nor",
    "not",
    "of",
    "off",
    "on",
    "once",
    "only",
    "or",
    "other",
    "ought",
    "our",
    "ours ",
    "ourselves",
    "out",
    "over",
    "own",
    "same",
    "shant",
    "shan't",
    "she",
    "she'd",
    "she'll",
    "shes",
    "she's",
    "should",
    "shouldnt",
    "shouldn't",
    "so",
    "some",
    "such",
    "than",
    "that",
    "thats",
    "that's",
    "the",
    "their",
    "theirs",
    "them",
    "themselves",
    "then",
    "there",
    "theres",
    "there's",
    "these",
    "they",
    "theyd",
    "they'd",
    "theyll",
    "they'll",
    "theyre",
    "they're",
    "theyve",
    "they've",
    "this",
    "those",
    "through",
    "to",
    "too",
    "under",
    "until",
    "up",
    "very",
    "was",
    "wasnt",
    "wasn't",
    "we",
    "we'd",
    "we'll",
    "we're",
    "weve",
    "we've",
    "were",
    "werent",
    "weren't",
    "what",
    "whats",
    "what's",
    "when",
    "whens",
    "when's",
    "where",
    "wheres",
    "where's",
    "which",
    "while",
    "who",
    "whos",
    "who's",
    "whom",
    "why",
    "whys",
    "why's",
    "with",
    "wont",
    "won't",
    "would",
    "wouldnt",
    "wouldn't",
    "you",
    "youd",
    "you'd",
    "youll",
    "you'll",
    "youre",
    "you're",
    "youve",
    "you've",
    "your",
    "yours",
    "yourself",
    "yourselves")

}
